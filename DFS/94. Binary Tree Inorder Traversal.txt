Given the root of a binary tree, return the inorder traversal of its nodes' values.

Example 1:


Input: root = [1,null,2,3]
Output: [1,3,2]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]


Iterative:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        stack = []
        result = []
        curr = root
        while curr or stack:
            while curr:
                stack.append(curr)
                curr = curr.left
            # pop from stack
            curr = stack.pop()
            result.append(curr.val)
            curr = curr.right
        return result


Recursion:

class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        return self.inorder(root)
    def inorder(self, root):
        result = []
        if root:
            # Visit the left node
            result = self.inorder(root.left)
            # Visit the parent node
            result.append(root.val)
            # Visit the right node
            result += self.inorder(root.right)
        return result


The time complexity of the given code is O(n), where n is the number of nodes in the binary tree.
The space complexity of the given code is O(h), where h is the height of the binary tree.
The stack can contain at most h nodes.