Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

 

Example 1:

Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.
Example 2:

Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.
 

Constraints:

1 <= haystack.length, needle.length <= 10^4
haystack and needle consist of only lowercase English characters.

Naive solutions:

class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        if needle not in haystack:
            return -1
        if len(needle) >= len(haystack):
            return 0
        for i in range(len(haystack) - len(needle) + 1):
            for j in range(len(needle)):
                if haystack[i + j] != needle[j]:
                    break
                elif j == len(needle) - 1:
                    return i


Rabin Karp, built-in hash, constant time (tested)

def strStr(self, haystack, needle):
	n, h = len(needle), len(haystack)
	hash_n = hash(needle)
	for i in range(h-n+1):
		if hash(haystack[i:i+n]) == hash_n:
			return i
	return -1


Rabin Karp, numeral base for both uppercase and lowercase letters, constant time

def strStr(self, haystack, needle):
	def f(c):
		return ord(c)-ord('A')

	n, h, d, m = len(needle), len(haystack), ord('z')-ord('A')+1, sys.maxint 
	if n > h: return -1
	nd, hash_n, hash_h = d**(n-1), 0, 0   
	for i in range(n):
		hash_n = (d*hash_n+f(needle[i]))%m
		hash_h = (d*hash_h+f(haystack[i]))%m            
	if hash_n == hash_h: return 0        
	for i in range(1, h-n+1):
		hash_h = (d*(hash_h-f(haystack[i-1])*nd)+f(haystack[i+n-1]))%m    # e.g. 10*(1234-1*10**3)+5=2345
		if hash_n == hash_h: return i
	return -1


KMP - Optimal solution

class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        m = len(needle)
        n = len(haystack)
        i = 0
        j = 0
        lps = self.compute_lps(needle)

        while i < n:
            if needle[j] == haystack[i]:
                i += 1
                j += 1
                if j == m:
                    # j reaches the end of pattern
                    return i - j
            else:
                # backtrack
                if j > 0:
                    j = lps[j - 1]
                else:
                    # j == 0, move to next letter
                    i += 1
        return -1
    
    # Function to compute LPS array
    def compute_lps(self, pattern):
        m = len(pattern)
        lps = [0] * m
        # The previous longest prefix that is also suffix
        j = 0
        i = 1
        

        while i < m:
            if pattern[j] == pattern[i]:
                # for example "aa"
                j += 1
                lps[i] = j
                i += 1
            else:
                # backtrack
                if j > 0:
                    j = lps[j - 1]
                else:
                    # if j == 0
                    lps[i] = 0
                    i += 1
        return lps


Time complexity:
O(M + N) where M and N are the length of needle and haystack

Space complexity:
O(M) where M is the length of needle.