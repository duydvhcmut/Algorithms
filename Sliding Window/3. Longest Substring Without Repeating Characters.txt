Medium:

Given a string s, find the length of the longest substring without repeating characters.
 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.


Sliding window:

We use a dictionary to store the character as the key, the last appear index has been seen so far as value.
seen[charactor] = index

move the pointer when you met a repeated character in your window.

indext    0    1    2    3   4   5   6   7
string    a    c    b    d   b   a   c   d
          ^                  ^
          |                  |
		left               right
		seen = {a : 0, c : 1, b : 2, d: 3} 
		# case 1: seen[b] = 2, current window  is s[0:4] , 
		#        b is inside current window, seen[b] = 2 > left = 0. Move left pointer to seen[b] + 1 = 3
		seen = {a : 0, c : 1, b : 4, d: 3} 



indext    0    1    2    3   4   5   6   7
string    a    c    b    d   b   a   c   d
						 ^   ^
					     |   |
				      left  right		
indext    0    1    2    3   4   5   6   7
string    a    c    b    d   b   a   c   d
					     ^       ^
					     |       |
				       left    right		
		# case 2: seen[a] = 0,which means a not in current window s[3:5] , since seen[a] = 0 < left = 3 
		# we can keep moving right pointer.


def LongestString(s):
    output = 0
    # To store seen characters
    seen = {}
    left = 0
    # example, s = "abcdebac"
    for right, value in enumerate(s):
        if value not in seen: 
            # we want to continue expanding the window
            output = max(output, right - left + 1)
        else:
            if seen[value] < left:
                # seen[value] is outside of the window, seen[value]...left
                # right pointer reaches "a" at index 6, but seen[a] = 0 now
                # it means left = 3 > seen[a], we want to continue expanding the window
                output = max(output, right - left + 1)
            else:
                # seen[value] is inside of the window
                # move left to seen[right] + 1
                # the left pointer reaches "b" at index 5, "b" is in seen and seen["b"] = 1 so we need to move left to seen["b"] + 1 to start a new window
                left = seen[value] + 1
        seen[value] = right
        
    return output

s = "abcdebac"
print(LongestString(s))
		

Time complexity :O(n).
n is the length of the input string.
It will iterate n times to get the result.

Space complexity: O(m)
m is the number of unique characters of the input.
We need a dictionary to store unique characters.