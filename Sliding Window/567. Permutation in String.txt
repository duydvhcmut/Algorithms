Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false


from collections import Counter
class Solution(object):
    def checkInclusion(self, s1, s2):
        """
        :type s1: str
        :type s2: str
        :rtype: bool
        """
        # can len(s1) > len(s2)
        # s2 = "aidbaooo", s1 = "abd"
        #         s e
        # Counter(s1) = {"a" : 1, "b": 1, "d": 1}
        # window_dict = {"a": 1, "i": 1, "d": 1}
        # window_dict = { "i": 1, "d": 1, "d": 1}
        # window_dict = { "d": 1, "b": 1, "a": 1}

        n = len(s1)
        m = len(s2)

        if len(s1) > len(s2):
            return False
        counter_s1 = Counter(s1)
        window_start = 0
        window_dict = Counter()
        for idx in range(len(s1)):
            value = s2[idx]
            window_dict[value] = window_dict.get(value, 0) + 1
        if window_dict == counter_s1:
            return True
        for window_end in range(len(s1), m):
            
            # add new character to dictionary
            value = s2[window_end]
            window_dict[value] = window_dict.get(value, 0) + 1
            # remove value of character in dictionary
            value_reduce = s2[window_start]
            window_dict[value_reduce] -= 1

            if window_dict[value_reduce] == 0:
                del window_dict[value_reduce]
            
            if window_dict == counter_s1:
                return True

            window_start += 1
        return False

        # s2 = "dcda", s1 = "adc"
        #         e
        # n = 3
        # m = 4
        #Counter(s1) = {"a" : 1, "d": 1, "c": 1}
        #window_start = 0
        #window_dict = { "d": 2, "c": 1}
        #window_end = 3
        #value = b
        #value_reduce = d

# Intuition
We use the sliding window to solve this problem.

# Approach
- Initialze window_dict(a Counter()) and add elements from s2 with range from 0 to len(s1) 
- We compare window_dict with Counter(s1). If it's not the same then we shift the window to the right, add new character to window_dict and remove the character from the left that is outside of the window.
- Compare window_dict with Counter(s1) again.
- Repeat the sequence until we reach the end of s2 string.

# Complexity
- Time complexity:
Counter(s1) takes O(N*logN)
For loop takes O(M)

Time complexity: O(N*logN) + O(M)

- Space complexity:
O(N) because we store N element if all characters in s1 are unique.