Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

 

Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.


Sliding window: Find the longest string with seen[0] < k

class Solution(object):
    def longestOnes(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        window_start = 0
        seen = {0: 0, 1: 0}
        max_len = 0
        for window_end, value in enumerate(nums):
            # Update the dictionary
            seen[value] = seen.get(value, 0) + 1
            while seen[0] > k:
                left_char = nums[window_start]
                window_start += 1
                seen[left_char] -= 1
            max_len = max(max_len, window_end - window_start + 1)
        return max_len

Time complexity: O(N)
Space complexity: O(1)