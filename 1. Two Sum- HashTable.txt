1. Two Sum
Easy

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
 

Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity? => Hashtable

####################################################################################################

Brute Force:

The time complexity of the twoSum function is O(n^2), where n is the length of the input list nums. This is because the function uses two nested loops to iterate over all possible pairs of elements in the list, resulting in a time complexity that grows quadratically with the size of the input.

The space complexity of the function is O(1), which means that the amount of memory used by the function does not depend on the size of the input. This is because the function only uses a constant amount of memory to store the loop indices and the return value.

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        for i in range(len(nums)-1):
            for j in range(i+1, len(nums)):
                if nums[i] + nums[j] == target:
                    return [i,j]
		return [] # No solution

####################################################################################################

Using Hashtable:

Use enumerate to find index and value of each element in nums
	calculate remaining = target - value
	if remaining is in seen dictionary
		return [seen[remaining], index]
	else we store value, index to seen dictionary
		seen[value] = index


class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        seen = {} # {seen_value: index} 

        # example nums = [1,2,3], target = 3 => [0,1]
        for idx, value in enumerate(nums):
            remaining = target - value
            if remaining in seen:
                return [seen[remaining],idx]
            else:
                seen[value] = idx
		return [] # No solution

The time complexity of the twoSum function is O(n), where n is the length of the input list nums. This is because the function uses a single loop to iterate over all elements in the list, resulting in a time complexity that grows linearly with the size of the input
The if remaining in seen statement does not contribute to the time complexity of the twoSum function. This is because the in operator in Python dictionaries has an average time complexity of O(1), which means that it takes a constant amount of time to check whether a key is present in the dictionary, regardless of the size of the dictionary


The space complexity of the function is also O(n), which means that the amount of memory used by the function grows linearly with the size of the input. This is because the function uses a dictionary to store the indices of previously seen values, which can grow up to the size of the input list.