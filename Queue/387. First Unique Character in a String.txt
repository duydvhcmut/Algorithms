Given a string s, find the first non-repeating character in it and return its index.
If it does not exist, return -1. 

Example 1:

Input: s = "leetcode"
Output: 0
Example 2:

Input: s = "loveleetcode"
Output: 2
Example 3:

Input: s = "aabb"
Output: -1


from collections import Counter
class Solution(object):
    def firstUniqChar(self, s):
        """
        :type s: str
        :rtype: int
        """
        s_counter = Counter(s)
        for idx, value in enumerate(s):
            if s_counter[value] == 1:
                return idx
        return -1

Time complexity: O(n)
Space complexity: O(n) but we can say O(1) because lowercase English characters are limited.

from collections import deque
class Solution(object):
    def firstUniqChar(self, s):
        """
        :type s: str
        :rtype: int
        """
        seen = {}
        char_queue = deque()
        for idx, value in enumerate(s):
            seen[value] = seen.get(value, 0) + 1
            char_queue.append([value, idx])

            while char_queue and seen[char_queue[0][0]] > 1:
				# popleft until char_queue does not have any repeated character
                char_queue.popleft()
        return char_queue[0][1] if char_queue else -1

Time complexity: O(n)
Space complexity: O(n) because char_queue may store n items