Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

 

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.


Assign prefix to the first string. Loop through strs, compare prefix and each string to find the common prefix.

class Solution(object):
    def longestCommonPrefix(self, strs):
        """
        :type strs: List[str]
        :rtype: str
        """
        if "" in strs or len(strs) == 0:
            return ""
        else:
            prefix = strs[0]
            for i in range(1, len(strs)):
                temp = []
                for j in range(len(prefix)):
                    if (len(strs[i]) - 1 >= j) and (prefix[j] == strs[i][j]):
                        temp.append(prefix[j])
                    else:
                        break
                prefix = temp
            return str.join("",prefix)

Time complexity: O(M*N). N is the total strings in strs, M is the length of the first string.
Space complexity: O(1)

Binary Search:

class Solution(object):
    def longestCommonPrefix(self, strs):
        """
        :type strs: List[str]
        :rtype: str
        """
        if "" in strs or len(strs) == 0:
            return ""

        min_len = min([len(strs[i]) for i in range(len(strs))])
        left = 0
        right = min_len

        while(left <= right):
            mid = (left + right) // 2
            if self.is_common_prefix(strs, mid):
                left = mid + 1
            else:
                right = mid - 1
        return strs[0][:(left + right) // 2]
    
    def is_common_prefix(self, strs, mid):
        prefix = strs[0][:mid]
        for element in strs:
            if not element.startswith(prefix):
                return False
        return True

Time complexity: O(M*log(N)). N is the total strings in strs, M is the length of the shortest string.
Space complexity: O(1)